import * as tslib_1 from "tslib";
import { Basement as Base, WHITELIST_EXTENSIONS, assert, OSSUploadHeaderList, BasementClientError, ErrorType, ErrorName, ErrorCode, OSSUploadResponseFormat, } from '@ant-basement/core';
import { DbService, FileService, AuthService, FunctionService, } from '@ant-basement/services';
import { MiniProgramHTTPTransport } from './transport';
import mime from 'mime/lite';
var MiniProgramFileService = (function (_super) {
    tslib_1.__extends(MiniProgramFileService, _super);
    function MiniProgramFileService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MiniProgramFileService.prototype.uploadFile = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var relativePath, extension, meta, headers, uploadRes, uploadOptions;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert(options.filePath && typeof options.filePath === 'string', 'missing options.filePath');
                        relativePath = options.filePath.replace(/(.*):\/\//, '');
                        extension = relativePath.split('.').pop();
                        assert(WHITELIST_EXTENSIONS.includes(extension.toLowerCase()), "\u76EE\u524D\u4E0D\u652F\u6301 " + extension + " \u7C7B\u578B\u6587\u4EF6");
                        meta = Object.keys(options.meta || {}).reduce(function (accu, key) {
                            accu["x-oss-meta-" + key] = options.meta[key];
                            return accu;
                        }, {});
                        headers = options.headers ? OSSUploadHeaderList.reduce(function (accu, key) {
                            var fieldName = key.replace(/\-[A-Z]/g, function (match) { return match[1]; }).replace(/^[A-Z]/, function (match) { return match.toLowerCase(); });
                            if (options.headers.hasOwnProperty(fieldName))
                                accu[key] = options.headers[fieldName];
                            return accu;
                        }, {}) : {};
                        return [4, this.getOSSUploadOptionsFromPath(relativePath, options.path, options.fileSize)];
                    case 1:
                        uploadRes = _a.sent();
                        if (uploadRes.error) {
                            throw new BasementClientError(ErrorName.INTERFACE_ERROR, ErrorCode.INTERFACE_RESPONSE_FAILED, ErrorType.COMMON_ERROR, uploadRes.error.message);
                        }
                        uploadOptions = OSSUploadResponseFormat(uploadRes.result);
                        return [4, this.uploadFileToOSS(options, uploadOptions, headers, meta)];
                    case 2:
                        _a.sent();
                        return [4, this.reportOSSUpload(uploadOptions.id, mime.getType(options.extension))];
                    case 3:
                        _a.sent();
                        return [2, {
                                fileUrl: "https://" + uploadOptions.host + "/" + uploadOptions.key,
                                filePath: uploadOptions.key,
                            }];
                }
            });
        });
    };
    MiniProgramFileService.prototype.uploadFileToOSS = function (fileUploadOptions, ossUploadOptions, headers, meta) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, uploadHeader, contentType;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = ['key', 'policy', 'Signature', 'OSSAccessKeyId'].reduce(function (accu, key) {
                            accu[key] = ossUploadOptions[key];
                            return accu;
                        }, ossUploadOptions);
                        uploadHeader = {};
                        if (fileUploadOptions.extension) {
                            contentType = mime.getType(fileUploadOptions.extension);
                            if (!contentType) {
                                throw new BasementClientError(ErrorName.VALIDATION_ERROR, ErrorCode.VALIDATION_FAILED, ErrorType.COMMON_ERROR, '文件扩展错误，无法解析正确的 MIME');
                            }
                            uploadHeader['Content-Type'] = contentType;
                        }
                        headers['Cache-Control'] = 'max-age=2592000';
                        return [4, this.transport.upload("https://" + ossUploadOptions.host, Object.assign({ success_action_status: 200 }, headers, meta, options), 'file', fileUploadOptions.filePath, uploadHeader)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    return MiniProgramFileService;
}(FileService));
var MPServerless = (function (_super) {
    tslib_1.__extends(MPServerless, _super);
    function MPServerless(appGlobal, options) {
        var _this = _super.call(this, tslib_1.__assign({}, options, { httpClient: appGlobal, httpTransport: MiniProgramHTTPTransport })) || this;
        assert(options.clientSecret, 'clientSecret is required');
        assert(options.appId, 'appId is required');
        _this.db = new DbService(_this.transport);
        _this.user = new AuthService(_this.transport);
        _this.file = new MiniProgramFileService(_this.transport);
        _this.function = new FunctionService(_this.transport);
        return _this;
    }
    Object.defineProperty(MPServerless.prototype, "version", {
        get: function () {
            return VERSION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPServerless.prototype, "ua", {
        get: function () {
            return PKGUA;
        },
        enumerable: true,
        configurable: true
    });
    MPServerless.prototype.createTransport = function (options) {
        _super.prototype.createTransport.call(this, options);
        this.transport.setAppSecret(options.clientSecret).setUA(this.ua);
    };
    return MPServerless;
}(Base));
export { MPServerless };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXBzZXJ2ZXJsZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21wc2VydmVybGVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFFBQVEsSUFBSSxJQUFJLEVBQ2hCLG9CQUFvQixFQUVwQixNQUFNLEVBSU4sbUJBQW1CLEVBQ25CLG1CQUFtQixFQUNuQixTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCx1QkFBdUIsR0FDeEIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQ0wsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsZUFBZSxHQUNyRCxNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2RCxPQUFPLElBQUksTUFBTSxXQUFXLENBQUM7QUFFN0I7SUFBcUMsa0RBQVc7SUFBaEQ7O0lBK0VBLENBQUM7SUF6RWMsMkNBQVUsR0FBdkIsVUFBd0IsT0FBMEI7Ozs7Ozt3QkFDaEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxPQUFPLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO3dCQUV2RixZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO3dCQUN6RCxTQUFTLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQzt3QkFDaEQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxvQ0FBUyxTQUFTLDhCQUFPLENBQUMsQ0FBQzt3QkFFcEYsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFJLEVB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