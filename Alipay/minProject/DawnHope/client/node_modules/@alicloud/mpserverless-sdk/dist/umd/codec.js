(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@ant-basement/core", "crypto-js", "util"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require("tslib");
    const core_1 = require("@ant-basement/core");
    const crypto_js_1 = tslib_1.__importDefault(require("crypto-js"));
    const util_1 = require("util");
    class MiniProgramHTTPRequestEncoder extends core_1.HTTPRequestEncoder {
        constructor(endpoint, spaceId) {
            super(endpoint);
            this.spaceId = spaceId;
            this.prefix = core_1.PREFIX.CLIENT;
            this.serviceHeaders = {};
            this.setBodyField({
                spaceId,
            });
        }
        sign(clientSecret) {
            const { spaceId, method, params, token, userId } = this.body;
            const timestamp = Date.now();
            this.setBodyField({
                timestamp,
            });
            let signString = '';
            const signObject = {
                spaceId,
                timestamp,
                method,
                params: JSON.stringify(params),
                token,
                userId,
            };
            Object.keys(signObject).sort().forEach(key => {
                if (signObject[key]) {
                    signString = `${signString}&${key}=${signObject[key]}`;
                }
            });
            signString = signString.slice(1);
            const sign = crypto_js_1.default.HmacMD5(signString, clientSecret).toString(crypto_js_1.default.enc.Hex);
            this.setServerlessHeaders({ sign });
        }
        encodeAsHTTPRequestObject(additionalObject) {
            if (this.body.params) {
                this.body.params = JSON.stringify(this.body.params);
            }
            return {
                url: this.url,
                data: this.body,
                method: this.method,
                headers: this.headers,
                dataType: 'json',
                ...additionalObject,
            };
        }
        clone() {
            const encoder = new MiniProgramHTTPRequestEncoder(this.endpoint, this.spaceId);
            encoder.setBodyField(this.body);
            encoder.setBaseHeaders(this.baseHeaders);
            encoder.setServerlessHeaders(this.serverlessHeaders);
            return encoder;
        }
    }
    exports.MiniProgramHTTPRequestEncoder = MiniProgramHTTPRequestEncoder;
    class MiniProgramHTTPResponseDecoder extends core_1.HTTPResponseDecoder {
        constructor() {
            super(...arguments);
            this.ERROR_CODES = [11, 12, 13, 14, 19, 20];
        }
        setStatusAndBody(status, body) {
            super.setStatusAndBody(status, body);
            if (this.ERROR_CODES.includes(status)) {
                this._error = core_1.BasementClientError.from({
                    name: core_1.ErrorName.IDE_ERROR,
                    code: status.toString(),
                    type: core_1.ErrorType.IDE_ERROR,
                    message: 'request error from Alipay IDE',
                });
            }
        }
        decode(res) {
            this.setHeaders(res.headers || {});
            let body = res.data || res.body;
            if (typeof body === 'string') {
                body = JSON.parse(body);
            }
            if (body && body.data) {
                if (util_1.isNumber(body.data.affectedDocs)) {
                    body = Object.assign({}, body, {
                        ...body.data,
                    });
                }
                else if (Object.prototype.toString.call(body.data) === '[object Object]') {
                    body.result = Object.assign({}, body.data);
                }
                else if (Object.prototype.toString.call(body.data) === '[object Array]') {
                    [...body.result] = body.data;
                }
                else {
                    body.result = body.data;
                }
                delete body.data;
            }
            const responseErrorCode = parseInt(res.error, 10);
            if (responseErrorCode) {
                this.setStatusAndBody(responseErrorCode, body);
                return super.decode();
            }
            const responseErrorMessage = res.err;
            if (responseErrorMessage) {
                this.setErrorMessage(responseErrorMessage);
                return super.decode();
            }
            if (res instanceof Error) {
                this.setErrorObject(res);
                return super.decode();
            }
            if (body && typeof body.error === 'object') {
                this.setErrorObject(body.error);
                return super.decode();
            }
            const responseStatusCode = parseInt(res.status || res.statusCode, 10);
            if (responseStatusCode) {
                this.setStatusAndBody(responseStatusCode, body);
                return super.decode();
            }
            this.setStatusAndBody(200, res);
            return super.decode();
        }
    }
    exports.MiniProgramHTTPResponseDecoder = MiniProgramHTTPResponseDecoder;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29kZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQUEsNkNBVTRCO0lBQzVCLGtFQUErQjtJQUMvQiwrQkFBZ0M7SUFvQmhDLE1BQWEsNkJBQThCLFNBQVEseUJBQWtCO1FBU25FLFlBQVksUUFBZ0IsRUFBWSxPQUFlO1lBQ3JELEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQURzQixZQUFPLEdBQVAsT0FBTyxDQUFRO1lBUjdDLFdBQU0sR0FBRyxhQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLG1CQUFjLEdBQTBCLEVBQUUsQ0FBQztZQVVuRCxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUNoQixPQUFPO2FBQ1IsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQU1NLElBQUksQ0FBQyxZQUFvQjtZQUM5QixNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDN0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQ2hCLFNBQVM7YUFDVixDQUFDLENBQUM7WUFDSCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDcEIsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLE9BQU87Z0JBQ1AsU0FBUztnQkFDVCxNQUFNO2dCQUNOLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDOUIsS0FBSztnQkFDTCxNQUFNO2FBQ1AsQ0FBQztZQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDbkIsVUFBVSxH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