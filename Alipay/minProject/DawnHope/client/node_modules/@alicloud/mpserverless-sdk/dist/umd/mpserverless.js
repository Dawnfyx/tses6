(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@ant-basement/core", "@ant-basement/services", "./transport", "mime/lite"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const tslib_1 = require("tslib");
    const core_1 = require("@ant-basement/core");
    const services_1 = require("@ant-basement/services");
    const transport_1 = require("./transport");
    const lite_1 = tslib_1.__importDefault(require("mime/lite"));
    class MiniProgramFileService extends services_1.FileService {
        async uploadFile(options) {
            core_1.assert(options.filePath && typeof options.filePath === 'string', 'missing options.filePath');
            const relativePath = options.filePath.replace(/(.*):\/\//, '');
            const extension = relativePath.split('.').pop();
            core_1.assert(core_1.WHITELIST_EXTENSIONS.includes(extension.toLowerCase()), `目前不支持 ${extension} 类型文件`);
            const meta = Object.keys(options.meta || {}).reduce((accu, key) => {
                accu[`x-oss-meta-${key}`] = options.meta[key];
                return accu;
            }, {});
            const headers = options.headers ? core_1.OSSUploadHeaderList.reduce((accu, key) => {
                const fieldName = key.replace(/\-[A-Z]/g, match => match[1]).replace(/^[A-Z]/, match => match.toLowerCase());
                if (options.headers.hasOwnProperty(fieldName))
                    accu[key] = options.headers[fieldName];
                return accu;
            }, {}) : {};
            const uploadRes = await this.getOSSUploadOptionsFromPath(relativePath, options.path, options.fileSize);
            if (uploadRes.error) {
                throw new core_1.BasementClientError(core_1.ErrorName.INTERFACE_ERROR, core_1.ErrorCode.INTERFACE_RESPONSE_FAILED, core_1.ErrorType.COMMON_ERROR, uploadRes.error.message);
            }
            const uploadOptions = core_1.OSSUploadResponseFormat(uploadRes.result);
            await this.uploadFileToOSS(options, uploadOptions, headers, meta);
            await this.reportOSSUpload(uploadOptions.id, lite_1.default.getType(options.extension));
            return {
                fileUrl: `https://${uploadOptions.host}/${uploadOptions.key}`,
                filePath: uploadOptions.key,
            };
        }
        async uploadFileToOSS(fileUploadOptions, ossUploadOptions, headers, meta) {
            const options = ['key', 'policy', 'Signature', 'OSSAccessKeyId'].reduce((accu, key) => {
                accu[key] = ossUploadOptions[key];
                return accu;
            }, ossUploadOptions);
            const uploadHeader = {};
            if (fileUploadOptions.extension) {
                const contentType = lite_1.default.getType(fileUploadOptions.extension);
                if (!contentType) {
                    throw new core_1.BasementClientError(core_1.ErrorName.VALIDATION_ERROR, core_1.ErrorCode.VALIDATION_FAILED, core_1.ErrorType.COMMON_ERROR, '文件扩展错误，无法解析正确的 MIME');
                }
                uploadHeader['Content-Type'] = contentType;
            }
            headers['Cache-Control'] = 'max-age=2592000';
            await this.transport.upload(`https://${ossUploadOptions.host}`, Object.assign({ success_action_status: 200 }, headers, meta, options), 'file', fileUploadOptions.filePath, uploadHeader);
        }
    }
    class MPServerless extends core_1.Basement {
        constructor(appGlobal, options) {
            super({ ...options, httpClient: appGlobal, httpTransport: transport_1.MiniProgramHTTPTransport });
            core_1.assert(options.clientSecret, 'clientSecret is required');
            core_1.assert(options.appId, 'appId is required');
            this.db = new services_1.DbService(this.transport);
            this.user = new services_1.AuthService(this.transport);
            this.file = new MiniProgramFileService(this.transport);
            this.function = new services_1.FunctionService(this.transport);
        }
        get version() {
            return VERSION;
        }
        get ua() {
            return PKGUA;
        }
        createTransport(options) {
            super.createTransport(options);
            this.transport.setAppSecret(options.clientSecret).setUA(this.ua);
        }
    }
    exports.MPServerless = MPServerless;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXBzZXJ2ZXJsZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21wc2VydmVybGVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFBQSw2Q0FjNEI7SUFDNUIscURBRWdDO0lBQ2hDLDJDQUF1RDtJQUN2RCw2REFBNkI7SUFFN0IsTUFBTSxzQkFBdUIsU0FBUSxzQkFBVztRQU12QyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQTBCO1lBQ2hELGFBQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztZQUU3RixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDL0QsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNoRCxhQUFNLENBQUMsMkJBQW9CLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLFNBQVMsU0FBUyxPQUFPLENBQUMsQ0FBQztZQUUxRixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNoRSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzlDLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1AsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsMEJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFF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