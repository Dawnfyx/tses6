(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@ant-basement/core", "./codec"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const core_1 = require("@ant-basement/core");
    const codec_1 = require("./codec");
    class MiniProgramHTTPTransport extends core_1.HTTPTransport {
        constructor(endpoint, library) {
            super(endpoint, library);
            this.scope = 'auth_user';
            core_1.assert(library.uploadFile, 'missing uploadFile');
            core_1.assert(library.getAuthCode, 'missing getAuthCode');
            core_1.assert(library.request, 'missing request');
            this.uploadFile = this.wrap(library.uploadFile);
            this.getAuthCode = this.wrap(library.getAuthCode);
            this.httpRequest = this.wrap(library.request);
        }
        getEncoder() {
            return new codec_1.MiniProgramHTTPRequestEncoder(this.endpoint, this.spaceId);
        }
        async request(encoder, retried = false) {
            const cloned = encoder.clone();
            const token = await this.getAccessToken();
            encoder.setBodyField({
                token,
            });
            encoder.sign(this.appSecret);
            encoder.setBaseHeaders({
                'Content-Type': 'application/json',
                'x-basement-token': token,
            });
            if (this.ua) {
                encoder.setBaseHeaders({
                    'x-serverless-ua': this.ua,
                });
            }
            try {
                const encoded = encoder.encodeAsHTTPRequestObject({
                    timeout: this.timeout,
                    dataType: 'json',
                });
                const decoded = await this.httpRequest(encoded);
                return decoded;
            }
            catch (e) {
                const isUnAuthorized = e.error.code === 'GATEWAY_INVALID_TOKEN'
                    || e.error.code === 'InvalidParameter.InvalidToken' || e.status === core_1.HTTP_UNAUTHORIZED;
                if (isUnAuthorized) {
                    if (retried) {
                        throw new core_1.BasementClientError(core_1.ErrorName.UNAUTHORIZED_ERROR, core_1.ErrorCode.AUTHENTICATION_FAILED, core_1.ErrorType.COMMON_ERROR, 'authentication failed');
                    }
                    await this.getAccessToken(true);
                    return await this.request(cloned, true);
                }
                if (e.error) {
                    throw e.error;
                }
                throw e;
            }
        }
        async authorize() {
            this.pendingRequest = this
                .getAuthCode({ scopes: this.scope })
                .then((res) => {
                return res.body.authCode;
            })
                .then((authCode) => {
                const encoder = this.getEncoder();
                encoder.setBodyField({
                    method: 'serverless.auth.user.authorize',
                    params: {
                        authProvider: 'alipay_openapi',
                        clientIdentifier: this.appId,
                        authCode,
                    },
                });
                encoder.sign(this.appSecret);
                encoder.setBaseHeaders({ 'Content-Type': 'application/json' });
                if (this.ua) {
                    encoder.setBaseHeaders({
                        'x-serverless-ua': this.ua,
                    });
                }
                const encoded = encoder.encodeAsHTTPRequestObject({
                    timeout: this.timeout,
                    dataType: 'json',
                });
                return this.httpRequest(encoded);
            })
                .then((res) => {
                if (res.body && res.body.result) {
                    this.accessToken = res.body.result.accessToken;
                }
                this.pendingRequest = null;
                return Promise.resolve(this.accessToken);
            });
            return this.pendingRequest;
        }
        async getAccessToken(refresh = false) {
            if (this.pendingRequest) {
                return this.pendingRequest;
            }
            if (refresh || !this.accessToken) {
                return this.authorize();
            }
            return this.accessToken;
        }
        async upload(host, formData, fileName, filePath, header) {
            return await this.uploadFile({
                url: host,
                formData,
                fileName,
                filePath,
                fileType: 'image',
                header: {
                    ...header,
                    'X-OSS-server-side-encrpytion': 'AES256',
                },
            });
        }
        wrap(myMethod) {
            return args => {
                return new Promise((resolve, reject) => {
                    myMethod(Object.assign(args, {
                        complete: (res = {}) => {
                            const decoder = new codec_1.MiniProgramHTTPResponseDecoder();
                            const response = decoder.decode(res);
                            if (response.error) {
                                return reject(response);
                            }
                            return resolve(response);
                        },
                    }));
                });
            };
        }
    }
    exports.MiniProgramHTTPTransport = MiniProgramHTTPTransport;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFBLDZDQWE0QjtJQUM1QixtQ0FLaUI7SUFRakIsTUFBYSx3QkFBeUIsU0FBUSxvQkFBYTtRQVF6RCxZQUNFLFFBQWdCLEVBQ2hCLE9BQVk7WUFFWixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBWGpCLFVBQUssR0FBZSxXQUFXLENBQUM7WUFZeEMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztZQUNqRCxhQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBQ25ELGFBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFFM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQU1NLFVBQVU7WUFDZixPQUFPLElBQUkscUNBQTZCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEUsQ0FBQztRQU9NLEtBQUssQ0FBQyxPQUFPLENBQ2xCLE9BQXNDLEVBQ3RDLFVBQW1CLEtBQUs7WUFFeEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBRS9CLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQzFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7Z0JBQ25CLEtBQUs7YUFDTixDQUFDLENBQUM7WUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QixPQUFPLENBQUMsY0FBYyxDQUFDO2dCQUNyQixjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxrQkFBa0IsRUFBRSxLQUFLO2FBQzFCLENBQUMsQ0FBQztZQUNILElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDWCxPQUFPLENBQUMsY0FBYyxDQUFDO29CQUNyQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRTtpQkFDM0IsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxJQUFJO2dCQUNGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztvQkFDaEQsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO29CQUNyQixRQUFRLEVBQUUsTUFBTTtpQkFDakIsQ0FBQyxDQUFDO2dCQUdILE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDaEQsT0FBTyxPQUFPLENBQUM7YUFDaEI7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyx1QkFBdUI7dUJBQzVELENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLCtCQUErQixJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssd0JBQWlCLENBQUM7Z0JBRXRGLElBQUksY0FBYyxFQUFFO29CQUNsQixJQUFJLE9BQU8sRUFBRTt3QkFFWCxNQUFNLElBQUksMEJBQW1CLENBQzNCLGdCQUFTLENBQUMsa0JBQWtCLEVBQzVCLGdCQUFTLENBQUMscUJBQXFCLEVBQy9CLGdCQUFTLENBQUMsWUFBWSxFQUN0Qix1QkFBdUIsQ0FDeEIsQ0FBQztxQkFDSDtvQkFHRCxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2hDLE9BQU8sTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7Z0JBRUQsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFO29CQUdYLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQztpQkFDZjtnQkFJRCxNQUFNLENBQUMsQ0FBQzthQUNUO1FBQ0gsQ0FBQztRQU9NLEtBQUssQ0FBQyxTQUFTO1lBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSTtpQkFDdkIsV0FBVyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQTRCLENBQUM7aUJBQzdELElBQUksQ0FBQyxDQUFDLEdBQXVCLEVBQUUsRUFBRTtnQkFFaEMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUMzQixDQUFDLENBQUM7aUJBQ0QsSUFBSSxDQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO2dCQUN6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxZQUFZLENBQUM7b0JBQ25CLE1BQU0sRUFBRSxnQ0FBZ0M7b0JBQ3hDLE1BQU0sRUFBRTt3QkFDTixZQUFZLEVBQUUsZ0JBQWdCO3dCQUM5QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSzt3QkFDNUIsUUFBUTtxQkFDVDtpQkFDRixDQUFDLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzdCLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLGNBQWMsQ0FBQzt3QkFDckIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUU7cUJBQzNCLENBQUMsQ0FBQztpQkFDSjtnQkFFRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUM7b0JBQ2hELE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztvQkFDckIsUUFBUSxFQUFFLE1BQU07aUJBQ2pCLENBQUMsQ0FBQztnQkFFSCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxDQUFDLEdBQXVCLEVBQUUsRUFBRTtnQkFFaEMsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztpQkFDaEQ7Z0JBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7Z0JBQzNCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDLENBQUM7WUFFTCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDN0IsQ0FBQztRQU9NLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBbUIsS0FBSztZQUNsRCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBRXZCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUM1QjtZQUNELElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFFaEMsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDekI7WUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQztRQVVNLEtBQUssQ0FBQyxNQUFNLENBQ2pCLElBQVksRUFDWixRQUFnQixFQUNoQixRQUFnQixFQUNoQixRQUFnQixFQUNoQixNQUE4QjtZQUk5QixPQUFPLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDM0IsR0FBRyxFQUFFLElBQUk7Z0JBQ1QsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLE1BQU0sRUFBRTtvQkFDTixHQUFHLE1BQU07b0JBQ1QsOEJBQThCLEVBQUUsUUFBUTtpQkFDekM7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDO1FBT1MsSUFBSSxDQUFDLFFBQVE7WUFDckIsT0FBTyxJQUFJLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUksT0FBTyxDQUFxQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtvQkFDekQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO3dCQUMzQixRQUFRLEVBQUUsQ0FBQyxNQUFXLEVBQUUsRUFBRSxFQUFFOzRCQUcxQixNQUFNLE9BQU8sR0FBRyxJQUFJLHNDQUE4QixFQUFFLENBQUM7NEJBQ3JELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7NEJBQ3JDLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtnQ0FDbEIsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7NkJBQ3pCOzRCQUVELE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUMzQixDQUFDO3FCQUNGLENBQUMsQ0FBQyxDQUFDO2dCQUNOLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDO1FBQ0osQ0FBQztLQUNGO0lBMU5ELDREQTBOQyJ9