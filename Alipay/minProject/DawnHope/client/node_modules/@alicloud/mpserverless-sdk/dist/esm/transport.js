import * as tslib_1 from "tslib";
import { HTTPTransport, HTTP_UNAUTHORIZED, ErrorCode, ErrorName, ErrorType, BasementClientError, assert, } from '@ant-basement/core';
import { MiniProgramHTTPRequestEncoder, MiniProgramHTTPResponseDecoder, } from './codec';
var MiniProgramHTTPTransport = (function (_super) {
    tslib_1.__extends(MiniProgramHTTPTransport, _super);
    function MiniProgramHTTPTransport(endpoint, library) {
        var _this = _super.call(this, endpoint, library) || this;
        _this.scope = 'auth_user';
        assert(library.uploadFile, 'missing uploadFile');
        assert(library.getAuthCode, 'missing getAuthCode');
        assert(library.request, 'missing request');
        _this.uploadFile = _this.wrap(library.uploadFile);
        _this.getAuthCode = _this.wrap(library.getAuthCode);
        _this.httpRequest = _this.wrap(library.request);
        return _this;
    }
    MiniProgramHTTPTransport.prototype.getEncoder = function () {
        return new MiniProgramHTTPRequestEncoder(this.endpoint, this.spaceId);
    };
    MiniProgramHTTPTransport.prototype.request = function (encoder, retried) {
        if (retried === void 0) { retried = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cloned, token, encoded, decoded, e_1, isUnAuthorized;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cloned = encoder.clone();
                        return [4, this.getAccessToken()];
                    case 1:
                        token = _a.sent();
                        encoder.setBodyField({
                            token: token,
                        });
                        encoder.sign(this.appSecret);
                        encoder.setBaseHeaders({
                            'Content-Type': 'application/json',
                            'x-basement-token': token,
                        });
                        if (this.ua) {
                            encoder.setBaseHeaders({
                                'x-serverless-ua': this.ua,
                            });
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 8]);
                        encoded = encoder.encodeAsHTTPRequestObject({
                            timeout: this.timeout,
                            dataType: 'json',
                        });
                        return [4, this.httpRequest(encoded)];
                    case 3:
                        decoded = _a.sent();
                        return [2, decoded];
                    case 4:
                        e_1 = _a.sent();
                        isUnAuthorized = e_1.error.code === 'GATEWAY_INVALID_TOKEN'
                            || e_1.error.code === 'InvalidParameter.InvalidToken' || e_1.status === HTTP_UNAUTHORIZED;
                        if (!isUnAuthorized) return [3, 7];
                        if (retried) {
                            throw new BasementClientError(ErrorName.UNAUTHORIZED_ERROR, ErrorCode.AUTHENTICATION_FAILED, ErrorType.COMMON_ERROR, 'authentication failed');
                        }
                        return [4, this.getAccessToken(true)];
                    case 5:
                        _a.sent();
                        return [4, this.request(cloned, true)];
                    case 6: return [2, _a.sent()];
                    case 7:
                        if (e_1.error) {
                            throw e_1.error;
                        }
                        throw e_1;
                    case 8: return [2];
                }
            });
        });
    };
    MiniProgramHTTPTransport.prototype.authorize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                this.pendingRequest = this
                    .getAuthCode({ scopes: this.scope })
                    .then(function (res) {
                    return res.body.authCode;
                })
                    .then(function (authCode) {
                    var encoder = _this.getEncoder();
                    encoder.setBodyField({
                        method: 'serverless.auth.user.authorize',
                        params: {
                            authProvider: 'alipay_openapi',
                            clientIdentifier: _this.appId,
                            authCode: authCode,
                        },
                    });
                    encoder.sign(_this.appSecret);
                    encoder.setBaseHeaders({ 'Content-Type': 'application/json' });
                    if (_this.ua) {
                        encoder.setBaseHeaders({
                            'x-serverless-ua': _this.ua,
                        });
                    }
                    var encoded = encoder.encodeAsHTTPRequestObject({
                        timeout: _this.timeout,
                        dataType: 'json',
                    });
                    return _this.httpRequest(encoded);
                })
                    .then(function (res) {
                    if (res.body && res.body.result) {
                        _this.accessToken = res.body.result.accessToken;
                    }
                    _this.pendingRequest = null;
                    return Promise.resolve(_this.accessToken);
                });
                return [2, this.pendingRequest];
            });
        });
    };
    MiniProgramHTTPTransport.prototype.getAccessToken = function (refresh) {
        if (refresh === void 0) { refresh = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (this.pendingRequest) {
                    return [2, this.pendingRequest];
                }
                if (refresh || !this.accessToken) {
                    return [2, this.authorize()];
                }
                return [2, this.accessToken];
            });
        });
    };
    MiniProgramHTTPTransport.prototype.upload = function (host, formData, fileName, filePath, header) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.uploadFile({
                            url: host,
                            formData: formData,
                            fileName: fileName,
                            filePath: filePath,
                            fileType: 'image',
                            header: tslib_1.__assign({}, header, { 'X-OSS-server-side-encrpytion': 'AES256' }),
                        })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    MiniProgramHTTPTransport.prototype.wrap = function (myMethod) {
        return function (args) {
            return new Promise(function (resolve, reject) {
                myMethod(Object.assign(args, {
                    complete: function (res) {
                        if (res === void 0) { res = {}; }
                        var decoder = new MiniProgramHTTPResponseDecoder();
                        var response = decoder.decode(res);
                        if (response.error) {
                            return reject(response);
                        }
                        return resolve(response);
                    },
                }));
            });
        };
    };
    return MiniProgramHTTPTransport;
}(HTTPTransport));
export { MiniProgramHTTPTransport };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLGFBQWEsRUFHYixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsbUJBQW1CLEVBRW5CLE1BQU0sR0FFUCxNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFHTCw2QkFBNkIsRUFDN0IsOEJBQThCLEdBQy9CLE1BQU0sU0FBUyxDQUFDO0FBUWpCO0lBQThDLG9EQUFhO0lBUXpELGtDQUNFLFFBQWdCLEVBQ2hCLE9BQVk7UUFGZCxZQUlFLGtCQUFNLFFBQVEsRUFBRSxPQUFPLENBQUMsU0FRekI7UUFuQlMsV0FBSyxHQUFlLFdBQVcsQ0FBQztRQVl4QyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUUzQyxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbEQsS0FBSSxDQUFDLFdBQVcsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7SUFDaEQsQ0FBQztJQU1NLDZDQUFVLEdBQWpCO1FBQ0UsT0FBTyxJQUFJLDZCQUE2QixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFPWSwwQ0FBTyxHQUFwQixVQUNFLE9B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